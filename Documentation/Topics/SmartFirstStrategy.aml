<?xml version="1.0" encoding="utf-8"?>
<topic id="e5b4af10-0235-4374-9134-a878fc7ecf7f" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
		<para>
			Создание торговых роботов под <token>smartcom</token> практически ничем не отличается от создания под <token>quik</token>. Для демонстрации
			взят пример из раздела <link xlink:href="b6fea084-f43c-4eb7-ab63-ad3031d748a5"/>, где показано как создавать торговое приложение под <token>quik</token>.
			Исходные коды примера лежат в дистрибутиве в папке под названием SampleSmartConsole.
		</para>
		<alert class="caution">
			<para>
				<token>smartcom</token> имеет те же ограничения на разрядность операционной системы, что и <token>quik</token>. Приложение необходимо компилировать
				под 32 бита. Как это сделать показано в <link xlink:href="b6fea084-f43c-4eb7-ab63-ad3031d748a5"/>.
			</para>
		</alert>
    </introduction>

    <prerequisites>
      <content>
        <para>
			<link xlink:href="7f488b0b-0f59-42b4-845b-fd766f5699dc"/>
		</para>
      </content>
    </prerequisites>
    
    <!-- One or more procedure or section elements -->

    <procedure>
      <title>Пример робота под SmartCOM</title>

      <steps class="ordered">
		  <step>
			  <content>
				  <para>
					  В самом начале необходимо заменить шлюз с <codeEntityReference>T:StockSharp.Quik.QuikTrader</codeEntityReference>
					  на <codeEntityReference>T:StockSharp.Smart.SmartTrader</codeEntityReference>:
				  </para>
				  <code language="C#">
// создаем шлюз к Smart-у
var trader = new SmartTrader(login, password);</code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  После создания шлюза необходимо подключиться к торговой системе. В случае с <codeEntityReference>T:StockSharp.Smart.SmartTrader</codeEntityReference>
					  такой системой выступает <token>smartcom</token>:
				  </para>
				  <code language="C#">// подписываемся на событие успешного подключения
// все действия необходимо производить только после подключения
trader.Connected += () =>
{
	Console.WriteLine("Подключение было произведено успешно.");

	// извещаем об успешном соединении
	waitHandle.Set();
};

Console.WriteLine("Производим подключение...");

trader.Connect();

// дожидаемся события об успешном соединении
waitHandle.WaitOne();</code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Далее, необходимо подписаться на события появления информации по инструментам (так программа получит сведения по бумаге Лукойл),
					  и портфелям (для выставления заявок). А также на событие появления Моих Сделок (сигнал пользователю о том, что произошла сделка по его
					  заявке):
				  </para>
				  <code language="C#"><![CDATA[// подписываемся на все портфели-счета
trader.NewPortfolios += portfolios =>
{
	// необходимое условие работы в SmartCOM
	portfolios.ForEach(trader.RegisterPortfolio);

	if (_portfolio == null)
	{
		// находим нужный портфель и присваиваем его переменной _portfolio
		_portfolio = portfolios.FirstOrDefault(p => p.Name == account);

		if (_portfolio != null)
		{
			Console.WriteLine("Портфель {0} появился.", account);

			if (_lkoh != null)
				waitHandle.Set();
		}
	}
};

// подписываемся на событие появления инструментов
trader.NewSecurities += securities =>
{
	if (_lkoh == null)
	{
		// находим Лукойл и присваиваем ее переменной lkoh
		_lkoh = securities.FirstOrDefault(sec => sec.Code == secCode && sec.Type == SecurityTypes.Equity);

		if (_lkoh != null)
		{
			Console.WriteLine("Инструмент Лукойл появился.");

			if (_portfolio != null)
				waitHandle.Set();
		}
	}
};

// подписываемся на событие появления моих новых сделок
trader.NewMyTrades += myTrades =>
{
	foreach (var myTrade in myTrades)
	{
		var trade = myTrade.Trade;
		Console.WriteLine("Сделка {0} по цене {1} по бумаге {2} по объему {3} в {4}.", trade.Id, trade.Price, trade.Security.Code, trade.Volume, trade.Time);
	}
};]]></code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Следующий этап - запустить экспорт данных:
				  </para>
				  <code language="C#">Console.WriteLine("Дожидаемся появления в программе инструмента Лукойл и портфеля {0}...".Put(account));

// запускаем экспорт по инструментам и портфелям
trader.StartExport();

// дожидаемся появления портфеля и инструмента
waitHandle.WaitOne();

trader.SecuritiesChanged += securities =>
{
	// если инструмент хоть раз изменился (по нему пришли актуальные данные)
	if (securities.Contains(_lkoh))
		waitHandle.Set();
};

Console.WriteLine("Дожидаемся обновления данных по инструменту Лукойл...");

// запускаем обновление по инструменту
trader.RegisterSecurity(_lkoh);
waitHandle.WaitOne();</code>
				  <para>
					  Когда данные начнут приходить в <codeEntityReference>T:StockSharp.Smart.SmartTrader</codeEntityReference>, то будут вызываться
					  события <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.ITrader.NewSecurities</codeEntityReference>,
					  <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.ITrader.NewOrders</codeEntityReference> и т.д. Для тех данных,
					  которые изменяются, вызывается другое событие. Например, для заявок, у которых изменяются значения Состояние, Остаток и т.д. будет
					  вызвано событие <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.ITrader.OrdersChanged</codeEntityReference>.
				  </para>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>Торговый алгоритм робота:</para>
				  <code language="C#"><![CDATA[// 0.1% от изменения цены
const decimal delta = 0.001m;

// запоминаем первоначальное значение середины спреда
var firstMid = lkoh.BestPair.SpreadPrice / 2;
if (_lkoh.BestBid == null)
	throw new Exception("Нет лучшего бида для котировки.");

Console.WriteLine("Первоначальное значение середины спреда {0:0.##}", _lkoh.BestBid.Price + firstMid);

while (true)
{
	var mid = lkoh.BestPair.SpreadPrice / 2;

	// если спред вышел за пределы нашего диапазона
	if	(
			((firstMid + firstMid * delta) <= mid) ||
			((firstMid - firstMid * delta) >= mid)
		)
	{
		var order = new Order
		{
			Portfolio = _portfolio,
			Price = lkoh.ShrinkPrice(lkoh.BestBid + mid),
			Security = lkoh,
			Volume = 1,
			Direction = OrderDirections.Buy,
		};
		trader.RegisterOrder(order);
		Console.WriteLine("Заявка {0} зарегистрирована", order.Id);
		break;
	}
	else
		Console.WriteLine("Текущее значение середины спреда {0:0.##}", _lkoh.BestBid.Price + mid);

	// ждем 1 секунду
	Thread.Sleep(1000);
}]]></code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>Завершение алгоритма и остановка экспорта:</para>
				  <code language="C#">// останавливаем экспорт
trader.StopExport();</code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>Освобождение занятых ресурсов:</para>
				  <code language="C#">trader.Dispose();</code>
			  </content>
		  </step>
      </steps>
    </procedure>
    
    <!--<section>
      <title>Optional section</title>

      <content>
        <para>Some topic content</para>
      </content>
    </section>-->

    <nextSteps>
      <content>
        <para>
			<link xlink:href="9d3b0442-0633-4ba5-97e1-22829adcd025"/>
		</para>
      </content>
    </nextSteps>
    
    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
                
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>