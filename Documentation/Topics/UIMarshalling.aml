<?xml version="1.0" encoding="utf-8"?>
<topic id="a0a4c8df-2bba-4e1e-8ba9-e1fa98728f92" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <summary>
      <para>Данный топик предназначен для трейдеров, которые разрабатывают графические торговые программы с
	  помощью <token>stocksharp</token>, но недостаточно знакомы с азами программирования графического интерфейса под <token>dotnet</token>.</para>
    </summary>

    <introduction>
      <para>В <token>dotnet</token> существует специальная технология для построения графического интерфейса – <token>wpf</token> (до этого была
	  технология <token>winforms</token>, которая значительно уступает по графическим возможностям). Основное ограничение визуального API под Windows
	  состоит в том, что нельзя обращаться из другого потока к элементам окна. Это связанно с ограничениями архитектуры Windows (подробнее описано здесь
	  <token>messagepump</token>). Реализации шлюза <codeEntityReference>T:StockSharp.BusinessEntities.ITrader</codeEntityReference> в целях повышения
	  производительности работают в многопоточном режиме. Поэтому, подписываясь на событие, например, <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.ITrader.NewSecurities</codeEntityReference>,
	  нельзя напрямую выводить полученные данные в окно для пользователя. Для этого нужно провести операцию синхронизации. Вот простой пример, как это делается:</para>
	  <code language="C#">
// обязательно нужно вызвать метод BeginInvoke,
// и уже в его обработчике можно обратиться к элементу окна 'Security' (это выпадающий список)
_trader.NewSecurities += securities => this.Dispatcher.BeginInvoke((Action)(() => this.Security.ItemsSource = _trader.Securities));</code>
	  <para>
		<token>stocksharp</token> уже содержит специальные методы, которые упрощают написание кода:
	  </para>
	  <code language="C#">// обязательно нужно вызвать метод GuiSync, прежде чем обратиться к элементу окна 'Security' (это выпадающий список)
_trader.NewSecurities += securities => this.GuiSync(() => this.Security.ItemsSource = _trader.Securities);</code>
	  <para>
		Для того, чтобы не осложнять процесс разработки торговых программ деталями и ограничениями, <token>stocksharp</token> содержит специальный шлюз
		<codeEntityReference>T:StockSharp.Xaml.GuiTrader`1</codeEntityReference>. Данный класс синхронизует события в один поток, и нет необходимости делать
		это в коде. Вышеприведенный код с использованием <codeEntityReference>T:StockSharp.Xaml.GuiTrader`1</codeEntityReference>:
	  </para>
	  <code language="C#">// теперь можно обратиться к элементу окна 'Security' (это выпадающий список) без конструкции GuiSync
_trader.NewSecurities += securities => this.Security.ItemsSource = _trader.Securities;</code>
	  <para>
		Для менеджера свечек <codeEntityReference>T:StockSharp.Algo.Candles.CandleManager</codeEntityReference> также существует синхронизованный
		вариант. Для того, чтобы получать синхронизованно события свечек 
		<codeEntityReference qualifyHint="false">E:StockSharp.Algo.Candles.CandleManager.Processing</codeEntityReference>,
		  необходимо создать <codeEntityReference>T:StockSharp.Algo.Candles.CandleManager</codeEntityReference> и передать в него несинхронизованный шлюз
		  <codeEntityReference>T:StockSharp.BusinessEntities.ITrader</codeEntityReference> (можно передавать и <codeEntityReference>T:StockSharp.Xaml.GuiTrader`1</codeEntityReference>,
		  но в этом случае будет происходить двойная синхронизация).
	  </para>
    </introduction>

    <!--<prerequisites>
      <content>
        <para>Optional information on prerequisites</para>
      </content>
    </prerequisites>-->
    
    <!-- One or more procedure or section elements -->

    <procedure>
      <title>Пример SampleSync</title>

      <steps class="ordered">
        <step>
          <content>
            <para>В самом начале необходимо создать подключение к торговой системе и синхронизовать его:</para>
			<code language="C#"><![CDATA[
// создаем шлюз к Quik-у и синхронизуем его
_trader = new QuikTrader(this.Path.Text).GuiSyncTrader();

// или напрямую через конструктор GuiTrader
// (пред. нужно закомментировать, это - раскомментировать)
// new GuiTrader<QuikTrader>(new QuikTrader(this.Path.Text));

// производим соединение
_trader.Connect();]]></code>
          </content>
        </step>
		<step>
		  <content>
			<para>Затем, подписаться на событие, в обработчике которого уже не нужно вызывать синхронизацию:</para>
			<code language="C#">// теперь можно обратиться к элементу окна 'Security' (это выпадающий список) без конструкции GuiSync
_trader.NewSecurities += securities => this.Security.ItemsSource = _trader.Securities;</code>
		  </content>
		</step>
		<step>
		  <content>
			<para>Работа со свечками, где также не требуется синхронизация:</para>
			<code language="C#"><![CDATA[
// создаем синхронизованный менеджер свечек по несинхронизованному шлюзу
_candleManager = new CandleManager(_trader.Trader);

private void ShowChart_Click(object sender, RoutedEventArgs e)
{
	var security = (Security)Security.SelectedValue;
	var series = new CandleSeries(typeof(TimeFrameCandle), security, TimeSpan.FromMinutes(5));
	_chartWindows.SafeAdd(series, key =>
	{
		var wnd = new ChartWindow
		{
			Title = "{0} {1}".Put(security.Code, series.Arg)
		};

		wnd.MakeHideable();

		series.ProcessCandle += candle => wnd.Chart.Candles.Add(candle);

		return wnd;
	}).Show();

	_candleManager.Start(series);
}
			]]>
			</code>
			<alert class="note">
			  Исходники примера лежат в папке SampleSync.
			</alert>
		  </content>
		</step>
      </steps>
    </procedure>

	<section>
      <title>Недостаток синхронизованного шлюза GuiTrader</title>

      <content>
		<para>
		  Основным минусом такого подхода является то, что графические операции (например, прорисовка графиков или таблиц, в зависимости от того,
		  какой будет сделан интерфейс) и торговые операции будут выполняться в одном потоке. А это приведет к тому, что данные операции будут
		  делить между собой процессорное время. И, если на компьютере установлен процессор с несколькими ядрами, то будет задействовано только
		  одно из них, а другие в это время будут простаивать. Визуально это будет проявляться в том, что окно с данными будет замирать на период
		  обработки события. И наоборот, событие будет дожидаться, пока полностью не прорисуется окно.
		</para>
		<para>
		  Как резюме, такое решение стоит использовать только в начале разработки роботов, когда еще нет достаточного опыта по написанию
		  автономным торговых программ с графическим интерфейсом.
		</para>
      </content>
    </section>

	<!--<nextSteps>
      <content>
        <para>Optional next steps after reading this walk-through</para>
      </content>
    </nextSteps>-->
    
    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
                
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>