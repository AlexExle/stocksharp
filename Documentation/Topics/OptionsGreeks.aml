<?xml version="1.0" encoding="utf-8"?>
<topic id="063708c5-b6a8-45f6-9ff9-608f89796a88" revisionNumber="0">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

	  <introduction>
		  <para>
			  В <token>stocksharp</token> реализована формула <token>bs</token> для расчета основных "греков": дельта, гамма, вега, тета и ро. На основе этой формулы
			  реализованы стратегии <link xlink:href="6fe5b321-a23d-415d-b3e3-af9de9212a20">Котирование по волатильности</link> и
			  <link xlink:href="598efa7f-83fb-4dc8-8822-e6776362f652">Дельта-хеджирование</link>. Так же <token>stocksharp</token> позволяет рассчитать премию
			  опциона и <token>IV</token>.
		  </para>
	  </introduction>

	  <procedure>
		  <title>Опционный калькулятор</title>

		  <steps class="ordered">
			  <step>
				  <content>
					  <para>
						  Для демострации работы с методами <token>bs</token> в дистрибутив входит пример OptionCalculator, который расчитывает все "греки" и
						  <token>IV</token>, и выводит их на экран.
					  </para>
				  </content>
			  </step>
			  <step>
				  <content>
					  <para>
						  В начале создается шлюз с соответствующими настройками таблицы инструментов (подробнее, в разделе <link xlink:href="b85270c7-ee7f-4dbc-a0a3-aac466b75f98">Опционы</link>)
						  и заполняется выпадающий список с опционами:
					  </para>
					  <code language="C#">// создаем шлюз
_trader = new QuikTrader(this.Path.Text);

// изменяем метаданные так, чтобы начали обрабатывать дополнительные колонки опционов
var columns = _trader.SecuritiesTable.Columns;
columns.Add(DdeSecurityColumns.Strike);
columns.Add(DdeSecurityColumns.Volatility);
columns.Add(DdeSecurityColumns.UnderlyingSecurity);
columns.Add(DdeSecurityColumns.TheorPrice);
columns.Add(DdeSecurityColumns.OptionType);
columns.Add(DdeSecurityColumns.ExpiryDate);

// добавляем в выпадающий список только опционы
_trader.NewSecurities += securities =>
	this.GuiAsync(() => _options.AddRange(securities.Where(s => s.Type == SecurityTypes.Option)));

// подписываемся на событие новых сделок чтобы обновить текущую цену фьючерса
_trader.NewTrades += trades => this.GuiAsync(() =>
{
	var option = this.SelectedOption;
	if (option != null)
	{
		var future = option.GetUnderlyingAsset();
		if (future.LastTrade != null)
			this.BaseActivePrice.Text = future.LastTrade.Price.ToString();
	}
});

_trader.StartExport(new[] {_trader.SecuritiesTable, _trader.TradesTable});</code>
				  </content>
			  </step>
			  <step>
				  <content>
					  <para>
						  Расчет "греков" и <token>IV</token> осуществляется с помощью класса <codeEntityReference>T:StockSharp.Algo.Derivatives.BlackScholes</codeEntityReference>:
					  </para>
					  <code language="C#"><![CDATA[var bs = new BlackScholes(option);

Delta.Text = bs.Delta(volatility).ToString("0.000");
Gamma.Text = bs.Gamma(volatility).ToString("0.000000");
Vega.Text = bs.Vega(volatility).ToString("0.00");
Theta.Text = bs.Theta(volatility).ToString("0.00");
Rho.Text = bs.Rho(volatility).ToString("0.00");

if (option.LastTrade != null)
	IV.Text = bs.IV(option.LastTrade.Price).ToString("0.00");]]></code>
					  <para>
						  При расчете "греков" цена базового актива береться изходя из установленного режима в
						  <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Derivatives.BlackScholes.SecurityPriceMode</codeEntityReference>.
						  По-умолчанию используется цена последней сделки из <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Security.LastTrade</codeEntityReference>.
					  </para>
				  </content>
			  </step>
			  <step>
				  <content>
					  <para>
						  Работающий пример OptionCalculator должен выглядеть следующим образом:
					  </para>
					  <mediaLink>
						  <image placement="center" xlink:href="sample_options_calc" />
					  </mediaLink>
				  </content>
			  </step>
		  </steps>
	  </procedure>

    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
        
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>

  </developerConceptualDocument>
</topic>