<?xml version="1.0" encoding="utf-8"?>
<topic id="cae38969-3e31-4180-9425-89b41b3bd6e9" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
		<para>
			<codeEntityReference>T:StockSharp.Smart.SmartTrader</codeEntityReference> поддерживает работу со стоп-заявками вида Стоп и СтопЛимит.
			Стоп-заявки регистрируются, заменяются и снимаются через те же методы, что и обычные заявки:
		</para>
		<para>
			<link xlink:href="e5b4af10-0235-4374-9134-a878fc7ecf7f">Создание первого робота</link>
		</para>
		<para>
			<link xlink:href="6267fec7-64e5-4488-ba08-c72cf61fcc9e">Снятие заявок</link>
		</para>
		<para>
			<link xlink:href="4b427409-9aa9-41d3-bb97-98745d1bba8e">Замена заявок</link>
		</para>
		<para>
			Для получения биржевой заявки, которая была создана стоп-заявкой при активации стоп условия, необходимо использовать свойство
			<codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Order.DerivedOrder</codeEntityReference>. Данное свойство используется,
			когда необходимо получить сделки, созданные в рамках стоп-заявки. При этом, сами сделки создаются не по стоп-, а по биржевой заявке, и чтобы их
			получить, следуют использовать подход вида:
		</para>
		<code language="C#">// получаем биржевую заявку по стоп-заявке
var marketOrder = stopOrder.DerivedOrder;

// если биржевая заявка зарегистрирована
if (marketOrder != null)
{
	var trades = trader.GetMyTrades(marketOrder);
	// ...
}</code>
		<para>
			Для того, чтобы создать стоп-заявки <token>smartcom</token>-а, необходимо заполнить поля <codeEntityReference>T:StockSharp.Smart.SmartOrderCondition</codeEntityReference>:
		</para>
		<alert class="note">
			<para>Исходные коды примера лежат в дистрибутиве в папке под названием SampleSmart.</para>
		</alert>
		<code language="C#"><![CDATA[var stopOrder = new Order
{
	Portfolio = (Portfolio)this.Portfolio.SelectedValue,
	Type = OrderTypes.Conditional,
	Volume = this.Volume.Text.To<int>(),
	Price = this.Price.Text.To<decimal>(),
	Security = this.Security,
	Direction = this.IsBuy.IsChecked == true ? OrderDirections.Buy : OrderDirections.Sell,
	StopCondition = new StockSharp.Smart.SmartOrderCondition
	{
		StopPrice = this.StopPrice.Text.To<decimal>(),
	},
};]]></code>
		<para>
			Если значение <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Order.Price</codeEntityReference> равно 0, то будет создана стоп-заявка, при 
			исполнении которой будет зарегистрирована рыночная заявка (<codeEntityReference qualifyHint="true">F:StockSharp.BusinessEntities.OrderTypes.Market</codeEntityReference>).
			Если значение не равно 0, то будет зарегистрирована лимитированная заявка (<codeEntityReference qualifyHint="true">F:StockSharp.BusinessEntities.OrderTypes.Limit</codeEntityReference>).
		</para>
    </introduction>

    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
                
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>