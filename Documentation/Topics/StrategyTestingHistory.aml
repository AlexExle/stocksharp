<?xml version="1.0" encoding="utf-8"?>
<topic id="5b90a23e-24b9-474a-a699-da47b666194a" revisionNumber="0">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
		<para>
			Тестирование на исторических данных позволяет проводить как анализ рынка для поиска закономерностей, так и
			<link xlink:href="24a5c734-199f-4090-943d-6324a04f335b">оптимизацию параметров стратегии</link>. Вся работа при этом заключена в классе
			<codeEntityReference>T:StockSharp.Algo.Testing.EmulationTrader</codeEntityReference>(подробнее про <link xlink:href="9e72851f-2a19-4680-b344-cdc39d1b85e1">настройки тестирования</link>), 
			который получает сохраненные в локальном хранилище данные через специальный <link xlink:href="e4a57b52-bd14-4640-a7c7-0979dba1ad0a">API</link>. Тестирование идет
			по тиковым сделкам (<codeEntityReference>T:StockSharp.BusinessEntities.Trade</codeEntityReference>) и стаканам
			(<codeEntityReference>T:StockSharp.BusinessEntities.MarketDepth</codeEntityReference>). Если на период в истории нет сохраненных стаканов, то они
			генерируются на основе сделок с помощью <codeEntityReference>T:StockSharp.Algo.Testing.MarketDepthGenerator</codeEntityReference>.
		</para>
		<para>
			Данные для тестирования на истории должны быть заранее скачаны и сохранены в специальном <token>stocksharp</token> формате. Это можно сделать
			самостоятельно, используя <codeEntityReference>N:StockSharp.Algo.History</codeEntityReference> и
			<link xlink:href="e4a57b52-bd14-4640-a7c7-0979dba1ad0a">API</link>, или настроить и запустить специальную программу <token>hydra</token>.
		</para>
		<para>
			В дистрибутиве <token>stocksharp</token> находится пример SampleHistoryTesting (а также архив HistoryData.zip, где лежат исторические данные по тикам, стаканам и свечкам, для
			примера), который тестирует стратегию <token>ma</token> на истории. Для сравнение скорости и качества, тестирование идет с различным набором маркет-данных:
		</para>
		<mediaLink>
			<image placement="center" xlink:href="samplehistorytest" />
		</mediaLink>
    </introduction>

	  <procedure>
		  <title>Тестирование на истории стратегии скользящих средних из примеров SampleSMA и SampleSmartSMA</title>
		  <steps class="ordered">
			  <step>
				  <content>
					  <para>
						  В начале необходимо создать настройки для тестирования:
					  </para>
        <code language="C#">
        <![CDATA[
// создаем настройки для тестирования
var settings = new[]
{
	new Tuple<CheckBox, ProgressBar, StatisticParameterPanel, EmulationInfo>(
		TicksCheckBox, 
		TicksTestingProcess, 
		TicksParametersPanel,
		// тест только на тиках
		new EmulationInfo {CurveColor = Colors.DarkGreen, StrategyName = "На тиках"}),

	new Tuple<CheckBox, ProgressBar, StatisticParameterPanel, EmulationInfo>(
		TicksAndDepthsCheckBox, 
		TicksAndDepthsTestingProcess, 
		TicksAndDepthsParametersPanel,
		// тест на тиках + стаканы
		new EmulationInfo {UseMarketDepth = true, CurveColor = Colors.Red, StrategyName = "На тиках & стаканах"}),

	new Tuple<CheckBox, ProgressBar, StatisticParameterPanel, EmulationInfo>(
		CandlesCheckBox, 
		CandlesTestingProcess, 
		CandlesParametersPanel,
		// тест на свечках
		new EmulationInfo {UseCandleTimeFrame = timeFrame, CurveColor = Colors.DarkBlue, StrategyName = "На свечках"})
		
	new Tuple<CheckBox, ProgressBar, StatisticParameterPanel, EmulationInfo>(
		CandlesAndDepthsCheckBox, 
		CandlesAndDepthsTestingProcess, 
		CandlesAndDepthsParametersPanel,
		// тест на свечках + стаканы
		new EmulationInfo {UseMarketDepth = true, UseCandleTimeFrame = timeFrame, CurveColor = Colors.Cyan, StrategyName = "На свечках&стаканах"})		
};
		]]>
		</code>
				  </content>
			  </step>		  	
		  	
			  <step>		  	
				  <content>
					  <para>
						  Далее, создать объект <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.IStorageRegistry</codeEntityReference>, через который
						  <codeEntityReference>T:StockSharp.Algo.Testing.EmulationTrader</codeEntityReference> будет получать исторические данные:
					  </para>
					  <code language="C#">
// хранилище, через которое будет производиться доступ к тиковой и котировочной базе
var storageRegistry = new StorageRegistry();

// изменяем путь, используемый по умолчанию
((LocalMarketDataDrive)storageRegistry.DefaultDrive).Path = HistoryPath.Text;

// используем алфавитное хранилище
((LocalMarketDataDrive) storageRegistry.DefaultDrive).UseAlphabeticPath = true;
</code>
					  <alert class="caution">
						  Через <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Storages.LocalMarketDataDrive.Path</codeEntityReference> указывается директория, где
						  лежит история для <legacyBold>всех инструментов</legacyBold>, а не директория с конкретным инструментом. Например, если архив
						  HistoryData.zip был распакован в директорию <localUri>C:\R\RIZ2@FORTS\</localUri>, то в 
						  <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Storages.LocalMarketDataDrive.Path</codeEntityReference>
						  необходимо передать пусть <localUri>C:\</localUri>. Подробнее, в разделе <link xlink:href="e4a57b52-bd14-4640-a7c7-0979dba1ad0a">API</link>.
					  </alert>
				  </content>
			  </step>
			  
			  <step>
				  <content>
					  <para>
						  Затем в зависимости от выбранных CheckBox в главном окне(Тики, Тики и стаканы, Свечки) создается отдельный инструмент, портфель, стратегия, шлюз для тестирования и т.д.:
					  </para>
        <code language="C#">
        <![CDATA[
foreach (var set in settings)
{
	if(!set.Item1.IsChecked.Value)
		continue;

	var progressBar = set.Item2;
	var statistic = set.Item3;
	var emulationInfo = set.Item4;
		]]>
		</code>
				  </content>
			  </step>		
			  
			  <step>
				  <content>
					  <para>
						  Необходимо создать (или загрузить) инструменты и портфели, по которым будет производиться тестирование:
					  </para>
					  <code language="C#">// создаем тестовый инструмент, на котором будет производится тестирование
var security = new Security
{
	Id = "RIZ2@FORTS", // по идентификатору инструмента будет искаться папка с историческими маркет данными
	Code = "RIZ2",
	Name = "RTS-12.12",
	MinStepSize = 10,
	MinStepPrice = 2,
	ExchangeBoard = ExchangeBoard.Forts,
}

// тестовый портфель
var portfolio = new Portfolio { Name = "test account", BeginValue = 1000000m };</code>
				  </content>
			  </step>
			  <step>
				  <content>
					  <para>
						  Создание самого <codeEntityReference>T:StockSharp.Algo.Testing.EmulationTrader</codeEntityReference>, куда передаются инструменты,
						  портфели, интерфейс хранилища <codeEntityReference>T:StockSharp.Algo.Storages.IStorageRegistry</codeEntityReference>, а также настройки тестирования:
					  </para>
					  <code language="C#"><![CDATA[
// создаем шлюз для эмуляции
// инициализируем настройки (инструмент в истории обновляется раз в секунду)
var trader = new EmulationTrader(
	new[] { security },
	new[] { portfolio })
{
	MarketTimeChangedInterval = timeFrame,
	StorageRegistry = storageRegistry,
					
	// использовать стаканы
	UseMarketDepth = emulationInfo.UseMarketDepth,
					
	// использовать свечки
	UseCandlesTimeFrame = emulationInfo.UseCandleTimeFrame,
};
					  ]]></code>
					  <!--para>
							При тестировании <link xlink:href="5b90a23e-24b9-474a-a699-da47b666194a"/> или <link xlink:href="ab42038e-836b-4c00-9332-0b2db2cbd948"/>
							вместе с информацией об инструменте передается и его ликвидность через параметр securitySettings в конструкторы
							<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Testing.HistoryEmulationTrader.#ctor(System.Collections.Generic.IDictionary{StockSharp.BusinessEntities.Security,System.TimeSpan},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio},StockSharp.Algo.Storages.ITradingStorage)</codeEntityReference>
							и <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Testing.RandomEmulationTrader.#ctor(System.Collections.Generic.IDictionary{StockSharp.BusinessEntities.Security,System.TimeSpan},System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Portfolio})</codeEntityReference>.
							Через <codeEntityReference>T:System.TimeSpan</codeEntityReference> указывается как часто меняется стакан для инструмента в процессе тестирования.
					   	</para>
						<para>
							При тестировании <link xlink:href="5b90a23e-24b9-474a-a699-da47b666194a"/> ликвидность инструмента используется для определения разрыва в исторических
							данных по стакану. Если за отрезок времени, который указывается через <codeEntityReference>T:System.TimeSpan</codeEntityReference>, не было загружено
							<codeEntityReference>T:StockSharp.Algo.Testing.HistoryEmulationTrader</codeEntityReference> ни одного стакану по инструменту, то это считается разрывом
							данных по стакану, и он генерируется случайным образом <codeEntityReference>T:StockSharp.Algo.Testing.MarketDepthGenerator</codeEntityReference>
							(по умолчанию используется реализация <codeEntityReference>T:StockSharp.Algo.Testing.ByTrendMarketDepthGenerator</codeEntityReference>, которая
							генерирует стакан на основе массива прошедших тиковых сделок).
						</para>
						<para>
							При тестировании <link xlink:href="ab42038e-836b-4c00-9332-0b2db2cbd948"/> ликвидность инструмента используется для определения момента, когда нужно
							сгенерировать новый стакан. По умолчанию используется реализация <codeEntityReference>T:StockSharp.Algo.Testing.BySecurityMarketDepthGenerator</codeEntityReference>,
							которая генерирует стакан на основе <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Security.LastTrade</codeEntityReference>,
							<codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Security.BestBid</codeEntityReference>,
							<codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Security.BestAsk</codeEntityReference>,
							<codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Security.ClosePrice</codeEntityReference> или
							<codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Security.OpenPrice</codeEntityReference> (в зависимости от того, что
							инициализировано в момент генерации стакана).
						</para-->
				  </content>
			  </step>
			  <step>
				  <content>
					  <para>
						  Зарегистрировать стакан по инструменту, для начала получения данных. 
						  Если для инструмента нет сохраненной истории стаканов, то необходимо указать ликвидность инструмента в истории (с какой
						  частотой в истории будет меняться стакан):
					  </para>
					  <code language="C#">
if (emulationInfo.UseMarketDepth)
	trader.RegisterMarketDepth(security);

if (emulationInfo.UseMarketDepth									// тест подразумевает наличие стаканов
		&amp;&amp; (generateDepths.Value									// если выбрана генерация стаканов вместо реальных стаканов
		|| emulationInfo.UseCandleTimeFrame!=TimeSpan.Zero			// для свечей генерируем стаканы всегда
	))
{
	// если история по стаканам отсутствует, но стаканы необходимы для стратегии,
	// то их можно сгенерировать на основании цен последних сделок или свечек.
	trader.RegisterMarketDepth(new TrendMarketDepthGenerator(security)
	{
		Interval = TimeSpan.FromSeconds(1), // стакан для инструмента в истории обновляется раз в секунду
		MaxAsksDepth = 1,
		MaxBidsDepth = 1,
		UseTradeVolume = true,
		MaxVolume = 1,
		MinSpreadStepCount = 2,  // минимальный генерируемый спред - 2 минимальных шага цены
		MaxSpreadStepCount = 5, // не генерировать спрэд между лучшим бид и аск больше чем 5 минимальных шагов цены - нужно чтобы при генерации из свечей не получалось слишком широкого спреда.
	});
}
					</code>
				  </content>
			  </step>				  
			  <step>
				  <content>
					  <para>
						  Подключение и запуск эскпорта данных:
					  </para>
					  <code language="C#">trader.Connect();
trader.StartExport();</code>
					  <para>
						  Для переданных в конструктор <codeEntityReference>T:StockSharp.Algo.Testing.EmulationTrader</codeEntityReference> инструментов
						  и портфелей вызывается <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.ITrader.NewSecurities</codeEntityReference>
						  и <codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.ITrader.NewPortfolios</codeEntityReference>.
					  </para>
				  </content>
			  </step>
		  
			  <step>
				  <content>
					  <para>
						  Создание менеджера свечек <codeEntityReference>T:StockSharp.Algo.Candles.CandleManager</codeEntityReference> (необходимо для
						  стратегии скользящих средних), в котором в качестве источника указан шлюз 
						  <codeEntityReference>T:StockSharp.Algo.Testing.EmulationTrader</codeEntityReference>
						  и регистрация 5-минутных свечек:
					  </para>
					  <code language="C#">
			var candleManager = new CandleManager(trader);
			var series = new CandleSeries(typeof(TimeFrameCandle), security, timeFrame);
			candleManager.Start(series);
</code>

				  </content>
			  </step>
			  <step>
				  <content>
					  <para>
						  Создание самой стратегии <token>ma</token>:
					  </para>
					  <code language="C#">
// создаем торговую стратегию, скользящие средние на 80 5-минуток и 10 5-минуток
var strategy = new SmaStrategy(series, new SimpleMovingAverage { Length = 80 }, new SimpleMovingAverage { Length = 10 })
{
	Volume = 1,
	Portfolio = portfolio,
	Security = security,
	Trader = _trader
};
</code>
				  </content>
			  </step>
			  <step>
				  <content>
					  <para>
						  Подписка на событие  <codeEntityReference qualifyHint="false">E:StockSharp.Algo.Strategies.Strategy.PnLChanged</codeEntityReference>, для расчета кривой эквити
						  (подробнее, в разделе <link xlink:href="973860e9-8f2d-4035-98de-bb88b33b6751"/>), а также визуальное наблюдение за прогрессом
						  тестирования (в примере используется элементы в виде полос прогресса):
					  </para>
						<code language="C#">
						<![CDATA[

// копируем параметры на визуальную панель
statistic.Parameters.Clear();
statistic.Parameters.AddRange(strategy.StatisticManager.Parameters);

var curveItems = Curve.CreateCurve(emulationInfo.StrategyName, emulationInfo.CurveColor);
strategy.PnLChanged += () =>
{
	var data = new EquityData
	{
		Time = strategy.GetMarketTime(),
		Value = strategy.PnL,
	};

	this.GuiAsync(() => curveItems.Add(data));
};

var nextTime = startTime + progressStep;

// и подписываемся на событие изменения времени, чтобы обновить ProgressBar
trader.MarketTimeChanged += d =>
{
	if (trader.CurrentTime >= nextTime || trader.CurrentTime >= stopTime)
	{
		nextTime += progressStep;
		this.GuiAsync(() => progressBar.Value++);
	}
};
					]]>
					</code>				
				  </content>
			  </step>
			  

			  <step>
				  <content>
					  <para>
						  Запуск начала тестирования:
					  </para>
					  <code language="C#">
// запускаем эмуляцию
foreach (var trader in _traders)
{
	// указываем даты начала и конца тестирования
	trader.Start(startTime, stopTime);
}
					  </code>
				  </content>
			  </step>
		  </steps>
	  </procedure>
<!--	  
	  <section>
      <title>Ускорение работы</title>
      <content>
        <para>
        	В процессе тестирования <codeEntityReference>T:StockSharp.Algo.Testing.EmulationTrader</codeEntityReference> создает несколько потоков загрузки
        	данных. Их количество по-умолчанию равно количеству процессоров (=ядер) минус 1. Если при работе тестирования было замечено, что некоторые
        	процессоры простаивают в работе, и при этом требуется увеличить скорость обработки исторических данных, то можно увеличить значение свойства
        	<codeEntityReference qualifyHint="true">P:StockSharp.Algo.Testing.EmulationTrader.LoadingThreadCount</codeEntityReference>.
        </para>
        <para>
        	Если тестирование потребляет слишком больше количество памяти, то его можно ограничить свойством <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Testing.EmulationTrader.DaysInMemory</codeEntityReference>.
        	Данное свойство показывает, сколько максимально дней в истории может храниться в очереди для обработки данных (значение параметра напрямую
        	зависит от <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Testing.EmulationTrader.LoadingThreadCount</codeEntityReference>). Уменьшив
        	<codeEntityReference qualifyHint="true">P:StockSharp.Algo.Testing.EmulationTrader.DaysInMemory</codeEntityReference>, уменьшится и объем
        	занимаемой памяти. <legacyBold>Внимание!</legacyBold> Уменьшение очереди может привести к замедлению работы, и стоит изменять этот параметр
        	только в том случае, если занимаемая память превысила размер физической.
        </para>
      </content>
    </section>
--> 


  </developerConceptualDocument>
</topic>
