<?xml version="1.0" encoding="utf-8"?>
<topic id="7d73f7bf-ae8b-4d76-9895-cffb6342203f" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
		<para>
			<codeEntityReference>T:StockSharp.Quik.QuikTrader</codeEntityReference> поддерживает экспорт не только стандартных таблиц, как Инструменты,
			Заявки и т.д., но и произвольных. Эта возможность необходима тем торговым алгоритмам, которые используют особый набор данных. Например,
			информацию, выводимую <legacyBold>QPILE</legacyBold> портфелем.
		</para>
    </introduction>

    <prerequisites>
      <content>
        <para>
			<link xlink:href="5c13da7b-b6e4-4fd4-958a-66c93c58b941">Настройка Quik</link>
		</para>
      </content>
    </prerequisites>
    
    <!-- One or more procedure or section elements -->

    <procedure>
      <title>Экспорт свечек, экспортируемых с помощью QPILE из графика цены и объема</title>

      <steps class="ordered">
		  <step>
			  <content>
				  <para>
					  В начале необходимо загрузить <legacyBold>QPILE</legacyBold> скрипт в <token>quik</token>-е и создать по нему таблицу как показано на рисунке:
				  </para>
				  <mediaLink>
					  <image placement="center" xlink:href="candleqpile" />
				  </mediaLink>
				  <alert class="note">
					  <para>
						  Исходные коды примера + qpile файл лежат в дистрибутиве в папке под названием <legacyItalic>SampleDdeCustomTable</legacyItalic>.
					  </para>
				  </alert>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Затем, описать строку таблицы со свечками в виде <token>dotnet</token> класса:
				  </para>
				  <code language="C#"><![CDATA[public class QuikCandleDateTime : Equatable<QuikCandleDateTime>
{
	[DdeCustomColumn("Дата", Order = 0)]
	public string Date { get; set; }

	[DdeCustomColumn("Время", Order = 1)]
	public string Time { get; set; }

	public override QuikCandleDateTime Clone()
	{
		throw new NotImplementedException();
	}

	public override int GetHashCode()
	{
		return this.Date.GetHashCode() ^ this.Time.GetHashCode();
	}

	protected override bool OnEquals(QuikCandleDateTime other)
	{
		return this.Date == other.Date && this.Time == other.Time;
	}
}

[DdeCustomTable("Исторические свечки")]
public class QuikCandle
{
	[Identity]
	[InnerSchema]
	public QuikCandleDateTime DateTime { get; set; }

	[DdeCustomColumn("Цена открытия", Order = 2)]
	public decimal OpenPrice { get; set; }

	[DdeCustomColumn("Максимальная цена", Order = 3)]
	public decimal HighPrice { get; set; }

	[DdeCustomColumn("Минимальная цена", Order = 4)]
	public decimal LowPrice { get; set; }

	[DdeCustomColumn("Цена закрытия", Order = 5)]
	public decimal ClosePrice { get; set; }

	[DdeCustomColumn("Объем", Order = 6)]
	public int Volume { get; set; }
}]]></code>
				  <para>
					  Атрибутом <codeEntityReference>T:StockSharp.Quik.DdeCustomTableAttribute</codeEntityReference> задается название
					  таблицы, из которой будут читаться данные. Дополнительно, через <codeEntityReference qualifyHint="true">T:StockSharp.Quik.DdeCustomColumnAttribute</codeEntityReference>
					  задаются название колонки в таблице и ее порядковый номер (нумерация идет с 0).
				  </para>
				  <para>
					  Через специальный атрибут <codeEntityReference qualifyHint="true">T:Ecng.Serialization.IdentityAttribute</codeEntityReference>
					  указывается идентификатор экспортируемой строки. Это позволит не создавать каждый раз объекты, а использовать уже ранее
					  созданные. В случае с таблицей исторических свечек, идентификатор состоит их двух параметров: дата и время. Поэтому они были вынесены
					  в отдельный класс <legacyItalic>QuikCandleDateTime</legacyItalic>.
				  </para>
			  </content>
		  </step>
		  <step>
			<content>
			  <para>
				  Далее, с помощью типа <legacyItalic>QuikCandle</legacyItalic> создается <codeEntityReference>T:StockSharp.Quik.DdeCustomTable</codeEntityReference>,
				  описывающий формат таблицы в терминале <token>quik</token>:
			  </para>
			  <code language="C#">_table = new DdeCustomTable(typeof(QuikCandle));</code>
			</content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Созданная таблица добавляется через свойство <codeEntityReference qualifyHint="true">P:StockSharp.Quik.QuikTrader.CustomTables</codeEntityReference>,
					  чтобы <codeEntityReference>T:StockSharp.Quik.QuikTrader</codeEntityReference> смог начать обрабатывать неизвестный поток <token>dde</token> данных
				  </para>
				  <code language="C#">this.Trader.CustomTables.Add(_table);</code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Подключение к событию <codeEntityReference qualifyHint="true">E:StockSharp.Quik.QuikTrader.NewCustomTables</codeEntityReference>:
				  </para>
				  <code language="C#"><![CDATA[this.Trader.NewCustomTables += (type, objects) =>
{
	// нас интересует только QuikCandle
	if (type == typeof(QuikCandle))
		_candlesWindow.Candles.AddRange(objects.Cast<QuikCandle>());
};]]></code>
				  <para>
					  Если необходимо не только получать новые строчки таблицы, но так же знать, когда обновились полученные ранее строчки, то необходимо
					  использовать событие <codeEntityReference qualifyHint="true">E:StockSharp.Quik.QuikTrader.CustomTablesChanged</codeEntityReference>.
					  В случае, если ни одно из полей не было помечено атрибутом <codeEntityReference qualifyHint="true">T:Ecng.Serialization.IdentityAttribute</codeEntityReference>,
					  то событие <codeEntityReference qualifyHint="true">E:StockSharp.Quik.QuikTrader.CustomTablesChanged</codeEntityReference> не будет никогда
					  вызываться, и все изменения будут приходит как новые строчки через <codeEntityReference qualifyHint="true">E:StockSharp.Quik.QuikTrader.NewCustomTables</codeEntityReference>.
				  </para>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Запустить экспорт по <token>dde</token>. Это можно сделать через метод <codeEntityReference qualifyHint="true">M:StockSharp.Quik.QuikTrader.StartExport(System.String)</codeEntityReference>,
					  передав в него название таблицы в <token>quik</token>, или вызвав метод <codeEntityReference qualifyHint="true">M:StockSharp.Quik.QuikTrader.StartExport(StockSharp.Quik.DdeCustomTable)</codeEntityReference>,
					  куда передается описание таблицы:
				  </para>
				  <code language="C#">this.Trader.StartExport(_table);</code>
				  <para>
					  В качестве названия таблицы передается то значение, что было указано через <codeEntityReference>T:StockSharp.Quik.DdeCustomTableAttribute</codeEntityReference>.
				  </para>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  В итоге должно получиться следующее:
				  </para>
				  <mediaLink>
					  <image placement="center" xlink:href="samplecandleqpile" />
				  </mediaLink>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Завершение работы:
				  </para>
				  <code language="C#">this.Trader.StopExport(_table);</code>
			  </content>
		  </step>
      </steps>
    </procedure>
    
    <!--<section>
      <title>Optional section</title>

      <content>
        <para>Some topic content</para>
      </content>
    </section>-->

    <!--<nextSteps>
      <content>
        <para>
		  <link xlink:href="448078e0-339b-4817-a97a-210b1ad2966f">Модификация стандартных таблиц</link>
		</para>
      </content>
    </nextSteps>-->
    
    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
                
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>